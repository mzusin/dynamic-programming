/*
https://github.com/mzusin/dynamic-programming
MIT License      
Copyright (c) 2023-present, Miriam Zusin       
*/
var c=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var a=(r,t)=>{for(var e in t)c(r,e,{get:t[e],enumerable:!0})},h=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of f(t))!l.call(r,o)&&o!==e&&c(r,o,{get:()=>t[o],enumerable:!(n=b(t,o))||n.enumerable});return r};var p=r=>h(c({},"__esModule",{value:!0}),r);var N={};a(N,{countBits:()=>R,fibonacciNumberIterative:()=>v,fibonacciNumberRecursive:()=>g,getRowIterative:()=>y,getRowRecursive:()=>P,maxProfit:()=>B,minCostClimbingStairsIterative:()=>x,minCostClimbingStairsRecursive:()=>C,tribonacciIterative:()=>M});module.exports=p(N);var g=r=>{let t=new Map,e=n=>{if(n<=1)return n;if(t.has(n))return t.get(n);let o=e(n-1)+e(n-2);return t.set(n,o),o};return e(r)},v=r=>{let t=[0,1];if(r<=1)return r;for(let e=2;e<=r;e++)t.push(t[e-1]+t[e-2]);return t[t.length-1]},M=r=>{let t=[0,1,1];for(let e=3;e<=r;e++)t[e]=t[e-1]+t[e-2]+t[e-3];return t[r]},R=r=>{var e;let t=[];for(let n=0;n<=r;n++){let o=n>>1,u=n&1;t[n]=((e=t[o])!=null?e:0)+u}return t},C=r=>{let t=[],e=u=>{if(u>=r.length)return 0;if(t[u]!==void 0)return t[u];let s=e(u+1),m=e(u+2),i=r[u]+Math.min(s,m);return t[u]=i,i},n=e(0),o=e(1);return Math.min(n,o)},x=r=>{let t=[0,0];for(let e=2;e<=r.length;e++)t[e]=Math.min(r[e-1]+t[e-1],r[e-2]+t[e-2]);return t[r.length]},P=r=>{if(r<=0)return[1];if(r===1)return[1,1];let t=(e,n)=>{if(n>r)return e;let o=[1];for(let u=1;u<n;u++)o[u]=e[u-1]+e[u];return o.push(1),t(o,n+1)};return t([1,1],2)},y=r=>{if(r<=0)return[1];if(r===1)return[1,1];let t=[1];for(let e=0;e<r;e++){let n=[1];for(let o=1;o<t.length;o++)n[o]=t[o-1]+t[o];n.push(1),t=n}return t},B=r=>{let t=r[0],e=0;for(let n=1;n<r.length;n++){let o=r[n];if(o<=t)t=o;else{let u=o-t;e=Math.max(e,u)}}return e};0&&(module.exports={countBits,fibonacciNumberIterative,fibonacciNumberRecursive,getRowIterative,getRowRecursive,maxProfit,minCostClimbingStairsIterative,minCostClimbingStairsRecursive,tribonacciIterative});
